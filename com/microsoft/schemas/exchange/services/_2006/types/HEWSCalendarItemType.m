// Generated by xsd compiler for ios/objective-c
// DO NOT CHANGE!

#import <Foundation/Foundation.h>
#import "HEWSCalendarItemType.h"
#import "HEWSNonEmptyArrayOfDeletedOccurrencesType.h"
#import "HEWSNonEmptyArrayOfAllItemsType.h"
#import "HEWSTimeZoneType.h"
#import "HEWSNonEmptyArrayOfAttendeesType.h"
#import "HEWSRecurrenceType.h"
#import "HEWSSingleRecipientType.h"
#import "HEWSNonEmptyArrayOfOccurrenceInfoType.h"
#import "HEWSTimeZoneDefinitionType.h"
#import "HEWSOccurrenceInfoType.h"

@implementation HEWSCalendarItemType

@synthesize uid = _uid;
@synthesize recurrenceId = _recurrenceId;
@synthesize dateTimeStamp = _dateTimeStamp;
@synthesize start = _start;
@synthesize end = _end;
@synthesize originalStart = _originalStart;
@synthesize isAllDayEvent = _isAllDayEvent;
@synthesize legacyFreeBusyStatus = _legacyFreeBusyStatus;
@synthesize location = _location;
@synthesize when = _when;
@synthesize isMeeting = _isMeeting;
@synthesize isCancelled = _isCancelled;
@synthesize isRecurring = _isRecurring;
@synthesize meetingRequestWasSent = _meetingRequestWasSent;
@synthesize isResponseRequested = _isResponseRequested;
@synthesize calendarItemType = _calendarItemType;
@synthesize myResponseType = _myResponseType;
@synthesize organizer = _organizer;
@synthesize requiredAttendees = _requiredAttendees;
@synthesize optionalAttendees = _optionalAttendees;
@synthesize resources = _resources;
@synthesize conflictingMeetingCount = _conflictingMeetingCount;
@synthesize adjacentMeetingCount = _adjacentMeetingCount;
@synthesize conflictingMeetings = _conflictingMeetings;
@synthesize adjacentMeetings = _adjacentMeetings;
@synthesize duration = _duration;
@synthesize timeZone = _timeZone;
@synthesize appointmentReplyTime = _appointmentReplyTime;
@synthesize appointmentSequenceNumber = _appointmentSequenceNumber;
@synthesize appointmentState = _appointmentState;
@synthesize recurrence = _recurrence;
@synthesize firstOccurrence = _firstOccurrence;
@synthesize lastOccurrence = _lastOccurrence;
@synthesize modifiedOccurrences = _modifiedOccurrences;
@synthesize deletedOccurrences = _deletedOccurrences;
@synthesize meetingTimeZone = _meetingTimeZone;
@synthesize startTimeZone = _startTimeZone;
@synthesize endTimeZone = _endTimeZone;
@synthesize conferenceType = _conferenceType;
@synthesize allowNewTimeProposal = _allowNewTimeProposal;
@synthesize isOnlineMeeting = _isOnlineMeeting;
@synthesize meetingWorkspaceUrl = _meetingWorkspaceUrl;
@synthesize netShowUrl = _netShowUrl;

// class meta-data method
// note: this method is only for internal use, DO NOT CHANGE!
+(PicoClassSchema *)getClassMetaData {
    return nil;
}

// property meta-data method
// note: this method is only for internal use, DO NOT CHANGE!
+(NSMutableDictionary *)getPropertyMetaData {
    NSMutableDictionary *map = [NSMutableDictionary dictionary];
    
    PicoPropertySchema *ps = nil;
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"UID" propertyName:@"uid" type:PICO_TYPE_STRING clazz:nil];
    [map setObject:ps forKey:@"uid"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"RecurrenceId" propertyName:@"recurrenceId" type:PICO_TYPE_DATE clazz:nil];
    [map setObject:ps forKey:@"recurrenceId"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"DateTimeStamp" propertyName:@"dateTimeStamp" type:PICO_TYPE_DATE clazz:nil];
    [map setObject:ps forKey:@"dateTimeStamp"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"Start" propertyName:@"start" type:PICO_TYPE_DATE clazz:nil];
    [map setObject:ps forKey:@"start"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"End" propertyName:@"end" type:PICO_TYPE_DATE clazz:nil];
    [map setObject:ps forKey:@"end"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"OriginalStart" propertyName:@"originalStart" type:PICO_TYPE_DATE clazz:nil];
    [map setObject:ps forKey:@"originalStart"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"IsAllDayEvent" propertyName:@"isAllDayEvent" type:PICO_TYPE_BOOL clazz:nil];
    [map setObject:ps forKey:@"isAllDayEvent"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"LegacyFreeBusyStatus" propertyName:@"legacyFreeBusyStatus" type:PICO_TYPE_ENUM clazz:nil];
    [map setObject:ps forKey:@"legacyFreeBusyStatus"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"Location" propertyName:@"location" type:PICO_TYPE_STRING clazz:nil];
    [map setObject:ps forKey:@"location"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"When" propertyName:@"when" type:PICO_TYPE_STRING clazz:nil];
    [map setObject:ps forKey:@"when"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"IsMeeting" propertyName:@"isMeeting" type:PICO_TYPE_BOOL clazz:nil];
    [map setObject:ps forKey:@"isMeeting"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"IsCancelled" propertyName:@"isCancelled" type:PICO_TYPE_BOOL clazz:nil];
    [map setObject:ps forKey:@"isCancelled"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"IsRecurring" propertyName:@"isRecurring" type:PICO_TYPE_BOOL clazz:nil];
    [map setObject:ps forKey:@"isRecurring"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"MeetingRequestWasSent" propertyName:@"meetingRequestWasSent" type:PICO_TYPE_BOOL clazz:nil];
    [map setObject:ps forKey:@"meetingRequestWasSent"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"IsResponseRequested" propertyName:@"isResponseRequested" type:PICO_TYPE_BOOL clazz:nil];
    [map setObject:ps forKey:@"isResponseRequested"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"CalendarItemType" propertyName:@"calendarItemType" type:PICO_TYPE_ENUM clazz:nil];
    [map setObject:ps forKey:@"calendarItemType"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"MyResponseType" propertyName:@"myResponseType" type:PICO_TYPE_ENUM clazz:nil];
    [map setObject:ps forKey:@"myResponseType"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"Organizer" propertyName:@"organizer" type:PICO_TYPE_OBJECT clazz:[HEWSSingleRecipientType class]];
    [map setObject:ps forKey:@"organizer"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"RequiredAttendees" propertyName:@"requiredAttendees" type:PICO_TYPE_OBJECT clazz:[HEWSNonEmptyArrayOfAttendeesType class]];
    [map setObject:ps forKey:@"requiredAttendees"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"OptionalAttendees" propertyName:@"optionalAttendees" type:PICO_TYPE_OBJECT clazz:[HEWSNonEmptyArrayOfAttendeesType class]];
    [map setObject:ps forKey:@"optionalAttendees"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"Resources" propertyName:@"resources" type:PICO_TYPE_OBJECT clazz:[HEWSNonEmptyArrayOfAttendeesType class]];
    [map setObject:ps forKey:@"resources"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"ConflictingMeetingCount" propertyName:@"conflictingMeetingCount" type:PICO_TYPE_INT clazz:nil];
    [map setObject:ps forKey:@"conflictingMeetingCount"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"AdjacentMeetingCount" propertyName:@"adjacentMeetingCount" type:PICO_TYPE_INT clazz:nil];
    [map setObject:ps forKey:@"adjacentMeetingCount"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"ConflictingMeetings" propertyName:@"conflictingMeetings" type:PICO_TYPE_OBJECT clazz:[HEWSNonEmptyArrayOfAllItemsType class]];
    [map setObject:ps forKey:@"conflictingMeetings"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"AdjacentMeetings" propertyName:@"adjacentMeetings" type:PICO_TYPE_OBJECT clazz:[HEWSNonEmptyArrayOfAllItemsType class]];
    [map setObject:ps forKey:@"adjacentMeetings"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"Duration" propertyName:@"duration" type:PICO_TYPE_STRING clazz:nil];
    [map setObject:ps forKey:@"duration"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"TimeZone" propertyName:@"timeZone" type:PICO_TYPE_STRING clazz:nil];
    [map setObject:ps forKey:@"timeZone"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"AppointmentReplyTime" propertyName:@"appointmentReplyTime" type:PICO_TYPE_DATE clazz:nil];
    [map setObject:ps forKey:@"appointmentReplyTime"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"AppointmentSequenceNumber" propertyName:@"appointmentSequenceNumber" type:PICO_TYPE_INT clazz:nil];
    [map setObject:ps forKey:@"appointmentSequenceNumber"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"AppointmentState" propertyName:@"appointmentState" type:PICO_TYPE_INT clazz:nil];
    [map setObject:ps forKey:@"appointmentState"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"Recurrence" propertyName:@"recurrence" type:PICO_TYPE_OBJECT clazz:[HEWSRecurrenceType class]];
    [map setObject:ps forKey:@"recurrence"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"FirstOccurrence" propertyName:@"firstOccurrence" type:PICO_TYPE_OBJECT clazz:[HEWSOccurrenceInfoType class]];
    [map setObject:ps forKey:@"firstOccurrence"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"LastOccurrence" propertyName:@"lastOccurrence" type:PICO_TYPE_OBJECT clazz:[HEWSOccurrenceInfoType class]];
    [map setObject:ps forKey:@"lastOccurrence"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"ModifiedOccurrences" propertyName:@"modifiedOccurrences" type:PICO_TYPE_OBJECT clazz:[HEWSNonEmptyArrayOfOccurrenceInfoType class]];
    [map setObject:ps forKey:@"modifiedOccurrences"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"DeletedOccurrences" propertyName:@"deletedOccurrences" type:PICO_TYPE_OBJECT clazz:[HEWSNonEmptyArrayOfDeletedOccurrencesType class]];
    [map setObject:ps forKey:@"deletedOccurrences"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"MeetingTimeZone" propertyName:@"meetingTimeZone" type:PICO_TYPE_OBJECT clazz:[HEWSTimeZoneType class]];
    [map setObject:ps forKey:@"meetingTimeZone"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"StartTimeZone" propertyName:@"startTimeZone" type:PICO_TYPE_OBJECT clazz:[HEWSTimeZoneDefinitionType class]];
    [map setObject:ps forKey:@"startTimeZone"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"EndTimeZone" propertyName:@"endTimeZone" type:PICO_TYPE_OBJECT clazz:[HEWSTimeZoneDefinitionType class]];
    [map setObject:ps forKey:@"endTimeZone"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"ConferenceType" propertyName:@"conferenceType" type:PICO_TYPE_INT clazz:nil];
    [map setObject:ps forKey:@"conferenceType"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"AllowNewTimeProposal" propertyName:@"allowNewTimeProposal" type:PICO_TYPE_BOOL clazz:nil];
    [map setObject:ps forKey:@"allowNewTimeProposal"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"IsOnlineMeeting" propertyName:@"isOnlineMeeting" type:PICO_TYPE_BOOL clazz:nil];
    [map setObject:ps forKey:@"isOnlineMeeting"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"MeetingWorkspaceUrl" propertyName:@"meetingWorkspaceUrl" type:PICO_TYPE_STRING clazz:nil];
    [map setObject:ps forKey:@"meetingWorkspaceUrl"];
    [ps release];
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"NetShowUrl" propertyName:@"netShowUrl" type:PICO_TYPE_STRING clazz:nil];
    [map setObject:ps forKey:@"netShowUrl"];
    [ps release];
    
    return map;
}



-(void)dealloc {
    self.uid = nil;
    self.recurrenceId = nil;
    self.dateTimeStamp = nil;
    self.start = nil;
    self.end = nil;
    self.originalStart = nil;
    self.isAllDayEvent = nil;
    self.legacyFreeBusyStatus = nil;
    self.location = nil;
    self.when = nil;
    self.isMeeting = nil;
    self.isCancelled = nil;
    self.isRecurring = nil;
    self.meetingRequestWasSent = nil;
    self.isResponseRequested = nil;
    self.calendarItemType = nil;
    self.myResponseType = nil;
    self.organizer = nil;
    self.requiredAttendees = nil;
    self.optionalAttendees = nil;
    self.resources = nil;
    self.conflictingMeetingCount = nil;
    self.adjacentMeetingCount = nil;
    self.conflictingMeetings = nil;
    self.adjacentMeetings = nil;
    self.duration = nil;
    self.timeZone = nil;
    self.appointmentReplyTime = nil;
    self.appointmentSequenceNumber = nil;
    self.appointmentState = nil;
    self.recurrence = nil;
    self.firstOccurrence = nil;
    self.lastOccurrence = nil;
    self.modifiedOccurrences = nil;
    self.deletedOccurrences = nil;
    self.meetingTimeZone = nil;
    self.startTimeZone = nil;
    self.endTimeZone = nil;
    self.conferenceType = nil;
    self.allowNewTimeProposal = nil;
    self.isOnlineMeeting = nil;
    self.meetingWorkspaceUrl = nil;
    self.netShowUrl = nil;
    [super dealloc];
}

@end
